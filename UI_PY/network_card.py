# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\network_card.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import *
from tools.basic import basic as Basic
import sys


class MyApplication(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.save_button.clicked.connect(self.save_to_file)

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(894, 653)
        self.formLayoutWidget = QtWidgets.QWidget(Form)
        self.formLayoutWidget.setGeometry(QtCore.QRect(220, 0, 671, 611))

        self.netword_card_formLayout = QtWidgets.QFormLayout(
            self.formLayoutWidget)
        basic = Basic(self.formLayoutWidget, self.netword_card_formLayout)

        basic.create("label", "network card")
        basic.create("combox", ["ieee 802.11a/g", "ieee 802.11b",
                     "ieee 802.11n", "802.15.4(zigbee)"], False)
        
        basic.create("label", "1D array index", True, "ArrIndi")
        
        basic.create("combox", ["0", "1", "2", "3", "4"],  True, "ArrIndi")
        
        basic.create("label", "Channel freauency", True, "freq")      
        child1 = basic.createChild("combox", ["Hz", "MHz", "GHz"])
        child2 = basic.createChild("line", "5000000000", True)
        basic.createLayout("hbox", [child1, child2])

        basic.create("label", "Channel bandwidth", True, "band")
        child1 = basic.createChild("combox", ["Hz", "MHz", "GHz"])
        child2 = basic.createChild("line", "20000000", True)
        basic.createLayout("hbox", [child1, child2])

        basic.create("label", "Transmission rate for data", True, "dtxr")
        child1 = basic.createChild("combox", ["bits/s", "Mbits/s", "Gbits/s"])
        child2 = basic.createChild("line", "54000000", True)
        basic.createLayout("hbox", [child1, child2])

        basic.create("label", "Transmission rate for control information", True, "ctxr")
        child1 = basic.createChild("combox", ["bits/s", "Mbits/s", "Gbits/s"])
        child2 = basic.createChild("line", "54000000", True)
        basic.createLayout("hbox", [child1, child2])

        basic.create("label", "Transmission distance", True, "txds")
        child1 = basic.createChild("combox", ["m", "Km"])
        child2 = basic.createChild("line", "0", True)
        basic.createLayout("hbox", [child1, child2])

        basic.create("label", "Signal propagation speed", True, "sps")
        basic.create("combox", ["LIGHTSPEED"], True)

        basic.create("label", "Transmission power", True, "txpw")
        child1 = basic.createChild("combox", ["Walt"])
        child2 = basic.createChild("line", "0.1", True)
        basic.createLayout("hbox", [child1, child2])

        basic.create("label", "Ambient noise", True, "noise")
        child1 = basic.createChild("combox", ["Walt"])
        child2 = basic.createChild("line", "0", True)
        basic.createLayout("hbox", [child1, child2])

        basic.create("label", "Antenna system", True, "antid")
        basic.create("combox", ["SISO", "MIMO", "directional", "omni"], True)
        
        basic.create("label", "FEC scheme", True, "fecid")
        basic.create("line", "0", True)
        
        basic.create("label", "MAC protocol", True, "macid")
        basic.create("combox", ["MACNPCSMA"], True)
        
        basic.create("label", "LLC protocol", True, "llcid")
        basic.create("combox", ["LLCNOP"], True)
        
        basic.create("label", "Preamble length for physical transmission", True, "prlen")
        child1 = basic.createChild("combox", ["bytes"])
        child2 = basic.createChild("line", "64", True)
        basic.createLayout("hbox", [child1, child2])
        
        basic.create("label", "Number of sub-channels", True, "nscha")
        basic.create("spinbox", 0, True)

        basic.create("label", "Communication media type", True, "mtype")
        basic.create("combox", ["radio", "laser", "acoustic", "fiber"], True)

        basic.create("label", "Communication mode", True, "cmode")
        basic.create("combox", ["duple", "simplex"], True)

        basic.create("label", "Default power model", True, "powermod")
        basic.create("line", "1", True)
        
        self.horizontalLayoutWidget = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget.setGeometry(
            QtCore.QRect(590, 610, 295, 41))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(
            self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.save_button = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.save_button.setObjectName("save_button")
        self.save_button.setText("save")
        self.horizontalLayout.addWidget(self.save_button)
        self.open_button = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.open_button.setObjectName("open_button")
        self.open_button.setText("open")
        self.horizontalLayout.addWidget(self.open_button)
        self.cancel_button = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.cancel_button.setObjectName("cancel_button")
        self.cancel_button.setText("cacel")
        self.horizontalLayout.addWidget(self.cancel_button)

        # 存放标签和值
        self.labels = basic.labels
        self.values = basic.values

    def save_to_file(self):
        file_name, _ = QFileDialog.getSaveFileName(
            self, "Save File", "", "Text Files (*.txt)")
        if file_name:
            with open(file_name, "w") as file:
                file.write('{\n')
                for label, value in zip(self.labels, self.values):
                    if isinstance(value, QComboBox):
                        value = value.currentText()
                    elif isinstance(value, QLineEdit):
                        value = value.text()
                    file.write(f'{label} = {value}\n')
                file.write('}\n')
        print("保存成功！")


def main():
    app = QApplication(sys.argv)
    ui = MyApplication()
    ui.show()
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
