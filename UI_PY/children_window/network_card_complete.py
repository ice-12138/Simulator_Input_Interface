# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\network_card.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from tools.basic import Basic
from enums.unit import *
from enums.module_type import *
from enums.input_type import *
import sys
import re


class MyApplication(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.save_button.clicked.connect(self.save_to_file)
        self.open_button.clicked.connect(self.open_file)

    def setupUi(self, Form):
        Form.resize(894, 653)
        self.formLayoutWidget = QWidget(Form)
        self.formLayoutWidget.setGeometry(QRect(220, 0, 671, 611))

        arg_11ag = [
            "ieee 802.11a/g",
            "0",
            "5000000000",
            "20000000",
            "54000000",
            "54000000",
            "0",
            "LIGHTSPEED",
            "0.1",
            "0",
            "omni",
            "0",
            "MACNPCSMA",
            "LLCNOP",
            "64",
            "1",
            "0",
            "1",
            "1",
        ]
        arg_11b = [
            "ieee 802.11b",
            "1",
            "2400000000",
            "20000000",
            "11000000",
            "11000000",
            "0",
            "LIGHTSPEED",
            "0.032",
            "0",
            "omni",
            "0",
            "MACNPCSMA",
            "LLCNOP",
            "64",
            "1",
            "0",
            "1",
            "1",
        ]
        arg_11n = [
            "ieee 802.11n",
            "2",
            "2400000000",
            "20000000",
            "100000000",
            "100000000",
            "0",
            "LIGHTSPEED",
            "0.1",
            "0",
            "MIMO",
            "0",
            "MACNPCSMA",
            "LLCNOP",
            "64",
            "1",
            "0",
            "1",
            "1",
        ]
        arg_zigbee = [
            "802.15.4(zigbee)",
            "3",
            "2400000000",
            "915000000",
            "40000",
            "40000",
            "0",
            "LIGHTSPEED",
            "0.00135",
            "0",
            "SISO",
            "0",
            "MACNPCSMA",
            "LLCNOP",
            "64",
            "1",
            "0",
            "1",
            "1",
        ]
        arg_16 = [
            "802.16",
            "4",
            "10000000000",
            "20000000",
            "30000000",
            "30000000",
            "0",
            "LIGHTSPEED",
            "0.1",
            "0",
            "SISO",
            "0",
            "MACNPCSMA",
            "LLCNOP",
            "64",
            "1",
            "0",
            "1",
            "1",
        ]
        argument = [arg_11ag, arg_11b, arg_11n, arg_zigbee, arg_16]

        global basic
        basic = Basic(self.formLayoutWidget, argument)

        basic.create(Module.LABEL, "network card", False)
        basic.create(
            Module.COMBOX,
            [
                "ieee 802.11a/g",
                "ieee 802.11b",
                "ieee 802.11n",
                "802.15.4(zigbee)",
                "802.16",
            ],
            False,
            True,
        )

        basic.create(Module.LABEL, "1D array index", True, name="ArrIndi")
        basic.create(Module.COMBOX, ["0", "1", "2", "3", "4"], True)

        basic.create(Module.LABEL, "Channel freauency", True, name="freq")
        child1 = basic.createChild(Module.COMBOX, FrequencyUnit.array())
        child2 = basic.createChild(Module.LINEEDIT, "5000000000", True, InputType.DIGIT)
        basic.createLayout(Layout.HBOX, [child1, child2])

        basic.create(Module.LABEL, "Channel bandwidth", True, name="band")
        child1 = basic.createChild(Module.COMBOX, FrequencyUnit.array())
        child2 = basic.createChild(Module.LINEEDIT, "20000000", True, InputType.DIGIT)
        basic.createLayout(Layout.HBOX, [child1, child2])

        basic.create(Module.LABEL, "Transmission rate for data", True, name="dtxr")
        child1 = basic.createChild(Module.COMBOX, SpeedUnit.array())
        child2 = basic.createChild(Module.LINEEDIT, "54000000", True, InputType.DIGIT)
        basic.createLayout(Layout.HBOX, [child1, child2])

        basic.create(
            Module.LABEL, "Transmission rate for control information", True, name="ctxr"
        )
        child1 = basic.createChild(Module.COMBOX, SpeedUnit.array())
        child2 = basic.createChild(Module.LINEEDIT, "54000000", True, InputType.DIGIT)
        basic.createLayout(Layout.HBOX, [child1, child2])

        basic.create(Module.LABEL, "Transmission distance", True, name="txds")
        child1 = basic.createChild(Module.COMBOX, DistanceUnit.array())
        child2 = basic.createChild(Module.LINEEDIT, "0", True, InputType.DIGIT)
        basic.createLayout(Layout.HBOX, [child1, child2])

        basic.create(Module.LABEL, "Signal propagation speed", True, name="sps")
        basic.create(Module.COMBOX, ["LIGHTSPEED"], True)

        basic.create(Module.LABEL, "Transmission power", True, name="txpw")
        child1 = basic.createChild(Module.COMBOX, PowerUnit.array())
        child2 = basic.createChild(Module.LINEEDIT, "0.1", True)
        basic.createLayout(Layout.HBOX, [child1, child2])

        basic.create(Module.LABEL, "Ambient noise", True, name="noise")
        child1 = basic.createChild(Module.COMBOX, PowerUnit.array())
        child2 = basic.createChild(Module.LINEEDIT, "0", True)
        basic.createLayout(Layout.HBOX, [child1, child2])

        basic.create(Module.LABEL, "Antenna system", True, name="antid")
        basic.create(Module.COMBOX, ["SISO", "MIMO", "directional", "omni"], True)

        basic.create(Module.LABEL, "FEC scheme", True, name="fecid")
        basic.create(Module.LINEEDIT, "0", True)

        basic.create(Module.LABEL, "MAC protocol", True, name="macid")
        basic.create(Module.COMBOX, ["MACNPCSMA"], True)

        basic.create(Module.LABEL, "LLC protocol", True, name="llcid")
        basic.create(Module.COMBOX, ["LLCNOP"], True)

        basic.create(
            Module.LABEL,
            "Preamble length for physical transmission",
            True,
            name="prlen",
        )
        child1 = basic.createChild(Module.COMBOX, ["bytes"])
        child2 = basic.createChild(Module.LINEEDIT, "64", True)
        basic.createLayout(Layout.HBOX, [child1, child2])

        basic.create(Module.LABEL, "Number of sub-channels", True, name="nscha")
        basic.create(Module.SPINBOX, 1, True)

        basic.create(Module.LABEL, "Communication media type", True, name="mtype")
        basic.create(Module.COMBOX, ["radio", "laser", "acoustic", "fiber"], True)

        basic.create(Module.LABEL, "Communication mode", True, name="cmode")
        basic.create(Module.COMBOX, ["duple", "simplex"], True)

        basic.create(Module.LABEL, "Default power model", True, name="powermod")
        basic.create(Module.LINEEDIT, "1", True)

        self.horizontalLayoutWidget = QWidget(Form)
        self.horizontalLayoutWidget.setGeometry(QRect(590, 610, 295, 41))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.save_button = QPushButton(self.horizontalLayoutWidget)
        self.save_button.setText("save")
        self.horizontalLayout.addWidget(self.save_button)
        self.open_button = QPushButton(self.horizontalLayoutWidget)
        self.open_button.setText("open")
        self.horizontalLayout.addWidget(self.open_button)
        self.cancel_button = QPushButton(self.horizontalLayoutWidget)
        self.cancel_button.setText("cacel")
        self.horizontalLayout.addWidget(self.cancel_button)

        self.arguments = basic.arguments
        self.modules = basic.modules

        basic.leader.currentIndexChanged.connect(
            lambda index: basic.updateValues(index)
        )

        # 存放标签和值
        self.labels = basic.labels
        self.values = basic.modules

    def save_to_file(self):
        file_name, _ = QFileDialog.getSaveFileName(
            self, "Save File", "", "Text Files (*.txt)"
        )
        if file_name:
            with open(file_name, "w") as file:
                file.write("{\n")
                for label, value in zip(self.labels, self.values):
                    if isinstance(value, QComboBox):
                        value = value.currentText()
                    elif isinstance(value, QLineEdit):
                        value = value.text()
                    elif isinstance(value, QSpinBox):
                        value = value.value()
                    file.write(f"{label} = {value}\n")
                file.write("}\n")
        print("保存成功！")

    def open_file(self):
        file_path, _ = QFileDialog.getOpenFileName(
            self, "Open File", "", "Text Files (*.txt)"
        )
        if file_path:
            try:
                with open(file_path, "r", encoding="utf-8") as file:
                    content = file.read()
                    values = []
                    # 使用正则表达式提取值
                    pattern = r"=\s*(\S+)"
                    matches = re.findall(pattern, content)
                    values.extend(matches)
                    basic.updateValuesOpen(values)
            except Exception as e:
                self.waring_edit = QTextEdit(self.formLayoutWidget)
                self.waring_edit.setPlainText("无法打开文件：{}".format(str(e)))


def main():
    app = QApplication(sys.argv)
    ui = MyApplication()
    ui.show()
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
